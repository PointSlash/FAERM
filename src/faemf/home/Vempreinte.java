/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package faemf.home;

import calculEmpreinte.calculEmpreinte;
import controller.controllerPatientBiometricData;
import java.util.List;
import jssc.SerialPort;
import jssc.SerialPortList;
import jssc.SerialPortException;
import jssc.SerialPortEvent;
import model.modelPatientBiometricData;

/**
 *
 * @author GadgetZone
 */
public class Vempreinte extends javax.swing.JFrame {
    
    private StringBuilder buffer = new StringBuilder();
    private boolean capturing = false;
    private String dataModel = "";
    private final int CAPTURE_SIZE = 1025;
    private String capturedData = "";
    private SerialPort port;
    
    private int longue=0;
    private int longue1=0;

    /**
     * Creates new form Vempreinte
     */
    public Vempreinte() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel3 = new java.awt.Panel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        fingerprint = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jButton10 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("Verifier via Empreinte digital");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/images (2).png"))); // NOI18N
        jLabel4.setOpaque(true);

        fingerprint.setBackground(new java.awt.Color(0, 86, 103));
        fingerprint.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        fingerprint.setText("Verifier ");
        fingerprint.setActionCommand("Verifier");
        fingerprint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fingerprintActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 51, 51));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Cliquer sur button Verifier ...");

        jPanel10.setOpaque(false);

        jLabel14.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 0, 0));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("Verifier via RFID   ");

        jButton10.setBackground(new java.awt.Color(0, 0, 0));
        jButton10.setText("ICI");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButton10))
        );

        javax.swing.GroupLayout panel3Layout = new javax.swing.GroupLayout(panel3);
        panel3.setLayout(panel3Layout);
        panel3Layout.setHorizontalGroup(
            panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE))
                    .addGroup(panel3Layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fingerprint, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panel3Layout.setVerticalGroup(
            panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panel3Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fingerprint, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 959, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(panel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 405, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(panel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fingerprintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fingerprintActionPerformed
        // TODO add your handling code here:
    connect("COM7");

    // Créer un nouveau thread pour attendre 2000 millisecondes avant d'envoyer les données
    new Thread(() -> {
        try {
            // Attendre 2000 millisecondes (2 secondes)
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // Vérifier si le port est ouvert, puis envoyer les données
        if (isPortOpen()) {
            sendData("1");
        } else {
            System.out.println("Le port série n'est pas ouvert.");
        }
    }).start();
    
    

    }//GEN-LAST:event_fingerprintActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
                VRfid ver = new VRfid();
                ver.show();
                dispose();
    }//GEN-LAST:event_jButton10ActionPerformed

    
    /**
     * 
     * ici je met les foction pour la verification _rfid et figenrprint_
     * 
     */
    
    // Méthode pour vérifier si le port est ouvert
    public boolean isPortOpen() {
        return port != null && port.isOpened();
    }
    
    
    public void connect(String portname) {
        port = new SerialPort(portname);
  
        try {
            port.openPort();
            port.setParams(
                    SerialPort.BAUDRATE_9600, 
                    SerialPort.DATABITS_8, 
                    SerialPort.STOPBITS_1,
                    SerialPort.PARITY_NONE
            );

            port.addEventListener((SerialPortEvent event) -> {
                if (event.isRXCHAR()) {
                    try {
                        String s = port.readString(event.getEventValue());
                        if (s != null) {
                            System.out.print(s);
                            buffer.append(s);

                            if (capturing) {
                                int remaining = CAPTURE_SIZE - capturedData.length();
                                if (s.length() <= remaining) {
                                    capturedData += s;
                                } else {
                                    capturedData += s.substring(0, remaining);
                                }

                                if (capturedData.length() >= CAPTURE_SIZE) {
                                    System.out.println("\nCaptured Data: " + capturedData);
                                    dataModel =capturedData.replaceAll("[^a-zA-Z0-9]", "");
                                    longue = dataModel.length();
                                    System.out.print("__/_"+longue+"_/__");
                                    longue1 = capturedData.length();
                                    capturing = false;
                                    capturedData = "";
                                    
                                    final_(dataModel);
                                    
                                }
                            } else {
                                String receivedData = buffer.toString();
                                int index = receivedData.indexOf("xxxxxxxx");
                                if (index != -1) {
                                    capturing = true;
                                    buffer.delete(0, index + 8); // Remove everything up to and including "xxxxxxxx"
                                    capturedData = "";
                                }

                            }

                        }
                    } catch (SerialPortException e) {
                        e.printStackTrace();
                    }
                }
            });
            System.out.println("Connecté au port: " + portname);
            
            // Envoi du caractère "1" après l'ouverture du port
//            sendData("1");
            
        } catch (SerialPortException e) {
            e.printStackTrace();
//                System.out.print("opi_____GoldenSlash");
        }
    }
    
    
    // Méthode pour envoyer des données sur le port série
    public void sendData(String data) {

        try {
            if (port != null && port.isOpened()) {
                port.writeString(data);
                System.out.println("Données envoyées : " + data);
            } else {
                System.out.println("Port non ouvert ou null");
            }
        } catch (SerialPortException e) {
            e.printStackTrace();
            }
    }
    
    
                                    
//______________________
                                    
    public void final_(String dataModel_){                                
                controllerPatientBiometricData cPB = new controllerPatientBiometricData();
                List<modelPatientBiometricData> patientBiometricDatas = cPB.Lst();
                                            
               
                for (modelPatientBiometricData PatientBiometricDatas : patientBiometricDatas) {
                byte[][] empreinte1 = calculEmpreinte.hexTo16x32Array(dataModel_);                                
                byte[][] empreinte2 = calculEmpreinte.hexTo16x32Array(PatientBiometricDatas.getFingerprint_model1());
                byte[][] empreinte3 = calculEmpreinte.hexTo16x32Array(PatientBiometricDatas.getFingerprint_model2());

                double similariteHamming = 1 - calculEmpreinte.hammingSimilarity(empreinte1, empreinte2);
                double similariteHamming1 = 1 - calculEmpreinte.hammingSimilarity(empreinte1, empreinte3);
                double pourcentageRessemblance = similariteHamming * 100;
                double pourcentageRessemblance1 = similariteHamming1 * 100;
                                                
                if (pourcentageRessemblance >= 65 && pourcentageRessemblance1 >= 65) {
                                                    
                    view ver = new view(PatientBiometricDatas.getPatient_id());
                    ver.show();
                    dispose();           
    //              sendData("1");
                                                              
                    } else {System.out.print(pourcentageRessemblance+"____");}
        }
    }           
//______________________
                                    
    
    
    /**
     ca prend fin ici__
     */
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Vempreinte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Vempreinte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Vempreinte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Vempreinte.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Vempreinte().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton fingerprint;
    private javax.swing.JButton jButton10;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel10;
    private java.awt.Panel panel3;
    // End of variables declaration//GEN-END:variables
}
