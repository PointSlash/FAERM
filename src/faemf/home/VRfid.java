/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package faemf.home;

import controller.*;
import java.util.List;
import jssc.SerialPort;
//import jssc.SerialPortList;
import jssc.SerialPortEvent;
import jssc.SerialPortException;
import model.*;


public class VRfid extends javax.swing.JFrame {
    
    private StringBuilder buffer = new StringBuilder();
    private boolean capturing = false;
//    private int captureCount = 0;
    private final int CAPTURE_SIZE = 1026;
    private String capturedData = "";
    private String capturedDataRFID = "";
    private SerialPort port;

    /**
     * Creates new form home
     */
        
    public VRfid() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel2 = new java.awt.Panel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        rfid = new javax.swing.JButton();
        rfidText = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(java.awt.Color.white);

        panel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Verifier via RFID");

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/images (1).png"))); // NOI18N
        jLabel4.setOpaque(true);

        rfid.setBackground(new java.awt.Color(0, 86, 103));
        rfid.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rfid.setText("Verifier");
        rfid.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        rfid.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        rfid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rfidActionPerformed(evt);
            }
        });

        rfidText.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        rfidText.setForeground(new java.awt.Color(51, 51, 51));
        rfidText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rfidText.setText("Cliquer sur le button Verifier ...");

        jPanel1.setOpaque(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Verifier via Empreinte      ");

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setText("ICI");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                .addComponent(jButton1))
        );

        javax.swing.GroupLayout panel2Layout = new javax.swing.GroupLayout(panel2);
        panel2.setLayout(panel2Layout);
        panel2Layout.setHorizontalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel2Layout.createSequentialGroup()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 157, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(292, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rfidText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(panel2Layout.createSequentialGroup()
                .addGap(328, 328, 328)
                .addComponent(rfid, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panel2Layout.setVerticalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(rfidText, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rfid, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 104, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getAccessibleContext().setAccessibleName("Mere");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rfidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rfidActionPerformed
        // TODO add your handling code here:
        connect("COM7");
        rfidText.setText("Veiller presenter la la carte devant le le lecteur...");
        rfid.setVisible(false);
    }//GEN-LAST:event_rfidActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    
        /**
     * 
     * ici je met les foction pour la verification _rfid et figenrprint_
     * 
     * @param portname
     */
    
    public void connect(String portname) {
        port = new SerialPort(portname);
  
        try {
            port.openPort();
            port.setParams(
                    SerialPort.BAUDRATE_9600, 
                    SerialPort.DATABITS_8, 
                    SerialPort.STOPBITS_1,
                    SerialPort.PARITY_NONE
            );

            port.addEventListener((SerialPortEvent event) -> {
                if (event.isRXCHAR()) {
                    try {
                        String s = port.readString(event.getEventValue());
                        if (s != null) {
                            System.out.print(s);
                            buffer.append(s);

                            // Détection et traitement de la séquence "8y"
                            if (buffer.indexOf("yyyyyyyy") != -1) {
                                int index = buffer.indexOf("yyyyyyyy");
                                if (buffer.length() >= index + 22) {
                                    String next8Chars = buffer.substring(index + 11, index + 22);
                                    System.out.println("Les 8 caractères suivants:__ " + next8Chars.replaceAll("\\s+", "")+"__fin");
                                    capturedDataRFID = next8Chars.replaceAll("\\s+", "");
                                    
                                    //______________________
                                    
                                            controllerPatientBiometricData cPB = new controllerPatientBiometricData();
                                            List<modelPatientBiometricData> patientBiometricDatas = cPB.Lst();

                                            for (modelPatientBiometricData PatientBiometricDatas : patientBiometricDatas) {
                                                if (capturedDataRFID.equals(PatientBiometricDatas.getRfid_id())) {
                                                            view ver = new view(PatientBiometricDatas.getPatient_id());
                                                            ver.show();
                                                            dispose();                                            
                                                        }
                                            }

                                    //______________________
                                    
                                    buffer.delete(0, index + 10); // Supprime jusqu'à après les 8 caractères suivants
//                                    sendData("1");
                                }
                            }

                            if (capturing) {
                                int remaining = CAPTURE_SIZE - capturedData.length();
                                if (s.length() <= remaining) {
                                    capturedData += s;
                                } else {
                                    capturedData += s.substring(0, remaining);
                                }

                                if (capturedData.length() >= CAPTURE_SIZE) {
                                    System.out.println("\nCaptured Data: " + capturedData);
                                    capturing = false;
                                    capturedData = "";
                                }
                            } else {
                                String receivedData = buffer.toString();
                                int index = receivedData.indexOf("xxxxxxxx");
                                if (index != -1) {
                                    capturing = true;
                                    buffer.delete(0, index + 8); // Remove everything up to and including "xxxxxxxx"
                                    capturedData = "";
                                }
                            }

                        }
                    } catch (SerialPortException e) {
                        e.printStackTrace();
                    }
                }
            });
            System.out.println("Connecté au port: " + portname);
            
            // Envoi du caractère "1" après l'ouverture du port
//            sendData("1");
            
        } catch (SerialPortException e) {
            e.printStackTrace();
//                System.out.print("opi_____GoldenSlash");
        }
    }
    
    
    // Méthode pour envoyer des données sur le port série
    public void sendData(String data) {

        try {
            if (port != null && port.isOpened()) {
                port.writeString(data);
                System.out.println("Données envoyées : " + data);
            } else {
                System.out.println("Port non ouvert ou null");
            }
        } catch (SerialPortException e) {
            e.printStackTrace();
            }
    }
    
    
    /**
     ca prend fin ici__
     */
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VRfid.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VRfid.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VRfid.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VRfid.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VRfid().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private java.awt.Panel panel2;
    private javax.swing.JButton rfid;
    private javax.swing.JLabel rfidText;
    // End of variables declaration//GEN-END:variables
}
